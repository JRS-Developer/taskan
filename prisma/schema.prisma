// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Example {
    id String @id @default(cuid())
}

// Necessary for Next auth
model Account {
    id                String   @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?  @db.Text
    access_token      String?  @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?  @db.Text
    session_state     String?
    user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    @@map("sessions")
}

model User {
    id            String            @id @default(cuid())
    name          String?
    email         String?           @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    createdBoards Board[]
    boards        MembersOnBoards[]
    createdAt     DateTime          @default(now())
    updatedAt     DateTime          @updatedAt

    @@map("users")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    @@unique([identifier, token])
    @@map("verificationtokens")
}

model Board {
    id          String            @id @default(uuid())
    title       String
    cover       String?
    description String?
    creator     User              @relation(fields: [creatorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    creatorId   String
    isPrivate   Boolean           @default(true)
    createdAt   DateTime          @default(now())
    updatedAt   DateTime          @updatedAt
    members     MembersOnBoards[]
    labels      Label[]

    @@map("boards")
}

// A board can have many members, and each user can be member of many boards
model MembersOnBoards {
    User      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId    String
    board     Board    @relation(fields: [boardId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    boardId   String
    isAdmin   Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@id([userId, boardId])
    @@map("membersonboards")
}

model BoardList {
    id        String   @id @default(uuid())
    name      String
    cards     Card[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("boardlists")
}

model Label {
    id        String          @id @default(uuid())
    name      String
    color     String
    cards     LabelsOnCards[]
    Board     Board?          @relation(fields: [boardId], references: [id])
    boardId   String?
    createdAt DateTime        @default(now())
    updatedAt DateTime        @updatedAt

    @@map("labels")
}

model Card {
    id          String          @id @default(uuid())
    name        String
    cover       String?
    description String?
    attachments Attachment[]
    labels      LabelsOnCards[]
    boardList   BoardList       @relation(fields: [boardListId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    boardListId String
    createdAt   DateTime        @default(now())
    updatedAt   DateTime        @updatedAt

    @@map("cards")
}

model Attachment {
    id        String   @id @default(uuid())
    name      String
    url       String
    Card      Card?    @relation(fields: [cardId], references: [id])
    cardId    String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("attachments")
}

// Cards can have many labels and labels can be at many cards
model LabelsOnCards {
    Label     Label    @relation(fields: [labelId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    labelId   String
    Card      Card     @relation(fields: [cardId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    cardId    String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@id([labelId, cardId])
    @@map("labelsoncards")
}
